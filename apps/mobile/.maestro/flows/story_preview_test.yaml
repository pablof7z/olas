appId: com.pablof7z.snapstr
---
- runFlow: ../common/wait_for_app_launch.yaml

# Setup test for the story preview screen
# In a real app, you would need a way to navigate to where media is displayed
# This test assumes we have a path to reach the story preview

# Test 1: Navigate to preview (placeholder - adjust to your app's structure)
# In a real test, you would:
# 1. Navigate to where media items are shown
# 2. Select an item to preview
# This is simplified for demonstration

- launchApp
- waitForAnimationToEnd:
    timeout: 5000

# Assuming we've reached the preview screen
# Test 2: Verify preview screen elements
- assertVisible:
    id: "preview-container"
- assertVisible:
    id: "close-button" 
- assertVisible:
    id: "add-text-button"
- assertVisible:
    id: "share-button"
- takeScreenshot: preview-screen-initial

# Test 3: Test adding text overlay functionality
- tapOn:
    id: "add-text-button"
- assertVisible: "Enter your text..."
- inputText: "Sample Story Text"
- takeScreenshot: text-input-modal

# Confirm adding text
- tapOn:
    id: "done-text-button"
- assertNotVisible: "Enter your text..."
- takeScreenshot: text-overlay-added

# Test 4: Test text cancellation
- tapOn:
    id: "add-text-button"
- assertVisible: "Enter your text..."
- inputText: "Text that will be cancelled"
- tapOn:
    id: "cancel-text-button"
- assertNotVisible: "Enter your text..."
- takeScreenshot: after-text-cancelled

# Test 5: Test closing the preview
- tapOn:
    id: "close-button"
# Assuming this takes us back to previous screen
- assertNotVisible:
    id: "preview-container"
    timeout: 3000

# Note: For a complete test suite, you would also want to test:
# 1. Video preview functionality
# 2. Panning/zooming interactions
# 3. Moving text overlays
# 4. Sharing functionality

# These interactions might require more complex gestures and
# could be implemented in separate test flows if needed 